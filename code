from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import Latest
from quantopian.pipeline.filters import StaticAssets,Q500US, make_us_equity_universe, Q1500US
from quantopian.pipeline import CustomFactor
from quantopian.pipeline.data.morningstar import asset_classification, valuation
from quantopian.pipeline.classifiers.morningstar import Sector
import numpy as np
import pandas as pd
from pykalman import KalmanFilter
import statsmodels.api as sm
from itertools import combinations,groupby
import statsmodels.api as statm
from statsmodels.tsa.stattools import adfuller

 
def initialize(context):
    """Called once at the start of the algorithm."""
    context.universe = Q500US() #Provide Universe from which stocks needs to be select
    context.population_size = 100 #Max number of stocks to be considered for pairs
    context.stationary_window = 1000     #Window to do stationary testing
    #Initialize history of pairs and price
    context.pair_hist={}
    context.today_pairs=[]
    context.price_hist=pd.DataFrame()
    #Initialize parameter to be updata
    context.signi_level=0.05 #Significance level for Co integration testing
    context.first_run=True
    context.zscore=0
    # Rebalance every day, 1 hour after market open.
    schedule_function(trade_pairs, date_rules.every_day(), time_rules.market_open(hours=1))
    # Rebalance every day, when market close
    schedule_function(track_status, date_rules.every_day(), time_rules.market_close())
    # Create our dynamic stock selector.
    attach_pipeline(pipeline_data(context), 'fund_data')
    
def before_trading_start(context, data):
    """Called every day before market open."""
    context.stock_list = pipeline_output('fund_data') #get updated pipline data
    context.stock_list.loc[:,"sid"]=context.stock_list.index #create a sid column to store index
    context.security_list=context.stock_list.index
    hist_price(context,data) #call history price function to do pair selection
    get_pairs(context,data) #get cointegrated pairs based on sectors
    """get today's lowest p_value pairs based on sectors"""
    context.today_pairs=[list(group)[0] for _, group in groupby(sorted(context.pair_hist.values(), key=lambda x: (x['sector'], x['p_value'])), key=lambda x: x['sector'])]
    
def trade_pairs(context,data):
    for pair in context.today_pairs:
        y=pair['stock1']
        print y
        x=pair['stock2']
        print x
        KPT=KalmanPairTrade(x,y,initial_bars=300, freq='1m', delta=1e-3, maxlen=300)
        if KPT.kf is None:
            KPT.initialize_filters(context, data)           
        context.zscore=(KPT.lprice_spread()[-1] - KPT.lprice_spread().mean()) /     KPT.lprice_spread().std()
        reference_pos = context.portfolio.positions[y].amount
        if reference_pos:
            if context.zscore > -0.0:
               order_target(y, 0.0)
               order_target(x, 0.0)

            elif context.zscore < 0.0:
                 order_target(y, 0.0)
                 order_target(x, 0.0)
        else:
            if context.zscore > 2:
                 order_target_percent(y, -1/2.)
                 order_target_percent(x, 1/2.)
            if context.zscore < -2:
                 order_target_percent(y, 1/2.)
                 order_target_percent(x, -1/2.)

class KalmanPairTrade(object):
    def __init__(self, x, y, initial_bars=60, 
                 freq='1d', delta=1e-3, maxlen=3000):
        self._y = y
        self._x = x
        self.maxlen = maxlen
        self.initial_bars = initial_bars
        self.freq=freq
        self.delta = delta
        self.Y = PricetoRef(self._y, maxlen=self.maxlen)
        self.X = PricetoRef(self._x, maxlen=self.maxlen)
        self.kf = None

        
    @property
    def name(self):
        return "{}~{}".format(self._y.symbol, self._x.symbol)

    def update(self, context, data):
        prices = np.log(data.history(context.security_list, 'price', 1, '1m'))
        self.X.update(prices)
        self.Y.update(prices)
        self.kf.update(self.price_frame().iloc[-1])

    def lprice_spread(self):
        lprice = self.price_frame()
        beta, alpha = self.kf.state_mean
        return lprice[self._y] - (beta * lprice[self._x] + alpha)

    def price_frame(self):
        update_Y = self.Y.pricetoref
        update_X = self.X.pricetoref
        return pd.DataFrame([update_Y, update_X]).T
         
    def initialize_filters(self, context, data):
        prices = np.log(data.history(context.security_list, 'price', self.initial_bars, self.freq))
        self.X.update(prices)
        self.Y.update(prices)

        # Drops the initial 0 mean value from the kalman filter
        self.X.pricetoref = self.X.pricetoref.iloc[-self.initial_bars:]
        self.Y.pricetoref = self.Y.pricetoref.iloc[-self.initial_bars:]
        self.kf = KalmanRegression(self.Y.pricetoref, self.X.pricetoref,
                                   delta=self.delta, maxlen=self.maxlen)
    
    def get_pnl(self, context, data):
        x = self._x
        y = self._y
        prices = data.history(context.security_list, 'price', 1, '1d').iloc[-1]
        positions = context.portfolio.positions
        dx = prices[x] - positions[x].cost_basis
        dy = prices[y] - positions[y].cost_basis
        return (positions[x].amount * dx +
                positions[y].amount * dy)

def handle_data(context, data):
    record(market_exposure=context.account.net_leverage,
           leverage=context.account.leverage)

class PricetoRef(object):   
    def __init__(self, asset,  initial_value=0, maxlen=3000):
        self.asset = asset
        self.maxlen = maxlen
        self.pricetoref = pd.Series([initial_value], name=self.asset)        
       
    def update(self, observations):
        for dt, observation in observations[self.asset].iteritems():
            self._update(dt, observation)
        
    def _update(self, dt, observation):
        self.pricetoref[dt] = observation
        if self.pricetoref.shape[0] > self.maxlen:
            self.pricetoref = self.pricetoref.iloc[-self.maxlen:]
               
class KalmanRegression(object):
    def __init__(self, initial_y, initial_x, delta=1e-5, maxlen=3000):
        self._x = initial_x.name
        self._y = initial_y.name
        self.maxlen = maxlen
        trans_cov = delta / (1 - delta) * np.eye(2)
        obs_mat = np.expand_dims(
            np.vstack([[initial_x], [np.ones(initial_x.shape[0])]]).T, axis=1)
        
        self.kf = KalmanFilter(n_dim_obs=1, n_dim_state=2,
                               initial_state_mean=np.zeros(2),
                               initial_state_covariance=np.ones((2, 2)),
                               transition_matrices=np.eye(2),
                               observation_matrices=obs_mat,
                               observation_covariance=1.0,
                               transition_covariance=trans_cov)
        state_means, state_covs = self.kf.filter(initial_y.values)
        self.means = pd.DataFrame(state_means, 
                                  index=initial_y.index, 
                                  columns=['beta', 'alpha'])
        self.state_cov = state_covs[-1]
        
    def update(self, observations):
        x = observations[self._x]
        y = observations[self._y]
        mu, self.state_cov = self.kf.filter_update(
            self.state_mean, self.state_cov, y, 
            observation_matrix=np.array([[x, 1.0]]))
        mu = pd.Series(mu, index=['beta', 'alpha'], 
                       name=observations.name)
        self.means = self.means.append(mu)
        if self.means.shape[0] > self.maxlen:
            self.means = self.means.iloc[-self.maxlen:]
        
    def get_spread(self, observations):
        x = observations[self._x]
        y = observations[self._y]
        return y - (self.means.beta[-1] * x + self.means.alpha[-1])
        
    @property
    def state_mean(self):
        return self.means.iloc[-1]

def get_pairs(context,data):
    #print "Get Pair"
    context.stock_list.loc[:,"isInt1"]= context.stock_list["sid"].map(lambda sec:check_Int1(context,sec)) 
    context.stock_group=context.stock_list[ context.stock_list["isInt1"].values].\
                        groupby("sector")
    context.paircount=0
    for key, group in context.stock_group:
        group_sids = group["sid"].tolist()
        group_sids.sort(key=lambda x:x.sid)
        if len(group_sids) > 1:
            for pair in combinations(group_sids,2):
                context.paircount+=1
                if check_coint(context,pair):
                    if pair in context.pair_hist:
                        None
                    else:
                        context.pair_hist[pair]={}
                        context.pair_hist[pair]["stock1"]=pair[0]
                        context.pair_hist[pair]["stock2"]=pair[1]
                        context.pair_hist[pair]["p_value"]=get_coin_pvalue(context,pair)
                        context.pair_hist[pair]['sector']=group['sector'][0]
                        
                        
#Get historical price    
def hist_price(context,data):
    #print "Price History"
    if (context.first_run):
        all_stocks=context.stock_list["sid"].tolist()
        context.price_hist = data.history(all_stocks, "price", context.stationary_window, '1d')
        context.first_run=False
    else:
        hist_stocks=context.price_hist.columns.tolist()
        prev_price=data.history(hist_stocks, "price", 1, '1d')
        context.price_hist = pd.concat([context.price_hist.iloc[1:,:],prev_price])
        hist_stock_ids=[sec.sid for sec in hist_stocks]
        today_only_stocks=[sec for sec in context.stock_list["sid"] if sec.sid not in hist_stock_ids]
        today_stock_hist = data.history(today_only_stocks, "price", context.stationary_window, '1d')
        context.price_hist = pd.concat([context.price_hist,
                                        today_stock_hist],axis=1)
        
    
def check_Int1(context,sid):
    data_x = context.price_hist[sid].diff()[1:]
    if data_x.isnull().any():
        return False
    else:
        return is_stationary(data_x,context.signi_level)

def check_coint(context,pair):
    data_x=context.price_hist[pair[0]]
    data_y=context.price_hist[pair[1]]
    return is_cointegrated(context,pair,data_x,data_y,context.signi_level)

def get_coin_pvalue(context,pair,cutoff=0.05):
    data_x=context.price_hist[pair[0]]
    data_y=context.price_hist[pair[1]]
    X=statm.add_constant(data_x)
    linear_comb=statm.OLS(data_y,X)
    fitted=linear_comb.fit()
    const,beta=fitted.params
    residual=fitted.resid
    if (beta < 0):
        #print "--------- Negative Beta---------"
        return False
    else:
        #Check if linear combination is I(0)
        return coin_pvalue(residual,cutoff)
    
def coin_pvalue(data_x,cut_off):
    p_value = adfuller(data_x)[1]
    return p_value

def is_stationary(data_x,cutoff):
    #Augmented Dickey-Fuller unit root test
    p_value = adfuller(data_x)[1]
    if p_value < cutoff:
        return True
    else:
        return False

def is_cointegrated(context,pair,data_x,data_y,cutoff=0.05):
    #Check linear reg
    X=statm.add_constant(data_x)
    linear_comb=statm.OLS(data_y,X)
    fitted=linear_comb.fit()
    const,beta=fitted.params
    residual=fitted.resid
    if (beta < 0):
        #print "--------- Negative Beta---------"
        return False
    else:
        #Check if linear combination is I(0)
        return is_stationary(residual,cutoff)
          
def pipeline_data(context):
    # Get the first 100 S&P500 index stock
    context.selection = make_us_equity_universe(context.population_size,             rankby=valuation.market_cap.latest, mask=context.universe,max_group_weight=0.1, groupby=asset_classification.morningstar_sector_code.latest)
    sector = asset_classification.morningstar_sector_code.latest  
    # Define a column dictionary that holds all the Factors
    pipe_columns = {'sector':sector}
    # Create a pipeline object with the defined columns and screen.
    pipe = Pipeline(columns=pipe_columns,screen=context.selection)
    return pipe

def track_status(context, data):
    print(context.today_pairs)
    print "Total Pairs %s, today coin pairs %s" % (context.paircount,len(context.today_pairs))
    pass
